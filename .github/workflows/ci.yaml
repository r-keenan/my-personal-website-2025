name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  repository_dispatch:
    types: [sanity_content_update]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get secrets from AWS
        id: secrets
        run: |
          SANITY_PROJECT_ID=$(aws secretsmanager get-secret-value --secret-id "SANITY_PROJECT_ID" --query SecretString --output text)
          SANITY_TOKEN=$(aws secretsmanager get-secret-value --secret-id "SANITY_TOKEN" --query SecretString --output text)
          SANITY_DATASET=$(aws secretsmanager get-secret-value --secret-id "SANITY_DATASET" --query SecretString --output text)
          SANITY_CDN_URL=$(aws secretsmanager get-secret-value --secret-id "SANITY_CDN_URL" --query SecretString --output text)

          # Mask secrets in logs (security)
          echo "::add-mask::$SANITY_PROJECT_ID"
          echo "::add-mask::$SANITY_TOKEN"
          echo "::add-mask::$SANITY_DATASET"
          echo "::add-mask::$SANITY_CDN_URL"

          # Make available to other steps
          echo "SANITY_PROJECT_ID=$SANITY_PROJECT_ID" >> $GITHUB_OUTPUT
          echo "SANITY_TOKEN=$SANITY_TOKEN" >> $GITHUB_OUTPUT
          echo "SANITY_DATASET=$SANITY_DATASET" >> $GITHUB_OUTPUT
          echo "SANITY_CDN_URL=$SANITY_CDN_URL" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm install

      - name: Formatting
        if: github.event_name != 'repository_dispatch'
        run: npm run format:check

      - name: Linting
        if: github.event_name != 'repository_dispatch'
        run: npm run lint

      - name: Install Playwright browsers
        if: github.event_name != 'repository_dispatch'
        run: npx playwright install

      - name: Build project
        run: npm run build
        env:
          SANITY_PROJECT_ID: ${{ steps.secrets.outputs.SANITY_PROJECT_ID }}
          SANITY_DATASET: ${{ steps.secrets.outputs.SANITY_DATASET }}
          SANITY_CDN_URL: ${{ steps.secrets.outputs.SANITY_CDN_URL }}
          SANITY_TOKEN: ${{ steps.secrets.outputs.SANITY_TOKEN }}

      - name: Run tests
        if: github.event_name != 'repository_dispatch'
        run: npm run test
